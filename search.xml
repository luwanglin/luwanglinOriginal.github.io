<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo添加live2d,让你获得一个可爱的girlfriend</title>
      <link href="/2020/08/13/hexo%E6%B7%BB%E5%8A%A0live2d-%E8%AE%A9%E4%BD%A0%E8%8E%B7%E5%BE%97%E4%B8%80%E4%B8%AA%E5%8F%AF%E7%88%B1%E7%9A%84girlfriend/"/>
      <url>/2020/08/13/hexo%E6%B7%BB%E5%8A%A0live2d-%E8%AE%A9%E4%BD%A0%E8%8E%B7%E5%BE%97%E4%B8%80%E4%B8%AA%E5%8F%AF%E7%88%B1%E7%9A%84girlfriend/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装必备环境"><a href="#1-安装必备环境" class="headerlink" title="1.安装必备环境"></a>1.安装必备环境</h2><p>假定你已经有了hexo的一些环境，比如npm，node等</p><p>我的个人环境如下：</p><pre><code class="shell">$ node -vv12.18.3$ npm -v6.14.6</code></pre><p>本人博客的主题为：</p><blockquote><p>hexo-theme-matery</p></blockquote><h2 id="2-安装模块"><a href="#2-安装模块" class="headerlink" title="2.安装模块"></a>2.安装模块</h2><ol><li><p>首先进入博客的主目录下</p></li><li><p>执行以下命令进行安装live2D模块</p><pre><code class="shell">npm install --save hexo-helper-live2d</code></pre></li><li><p>这样进行安装后，我并没有进行相关的配置直接就可以在博客中看到可爱的动漫人物了</p><p>默认的人物是：</p><blockquote><p>shizuku</p></blockquote></li></ol><h2 id="3-修改默认配置，选择自己喜欢的人物"><a href="#3-修改默认配置，选择自己喜欢的人物" class="headerlink" title="3.修改默认配置，选择自己喜欢的人物"></a>3.修改默认配置，选择自己喜欢的人物</h2><p>   截图预览，参考作者的博客，以下为相关展示</p><h4 id="Epsilon2-1"><a href="#Epsilon2-1" class="headerlink" title="Epsilon2.1"></a>Epsilon2.1</h4><p>   <img src="/images/live2d/Epsilon2.1.gif" alt="img"></p><h4 id="Gantzert-Felixander"><a href="#Gantzert-Felixander" class="headerlink" title="Gantzert_Felixander"></a>Gantzert_Felixander</h4><p>   <img src="/images/live2d/Gantzert_Felixander.gif" alt="img"></p><h4 id="haru"><a href="#haru" class="headerlink" title="haru"></a>haru</h4><p>   <img src="/images/live2d/haru.gif" alt="img"></p><h4 id="miku"><a href="#miku" class="headerlink" title="miku"></a>miku</h4><p>   <img src="/images/live2d/miku.gif"></p><h4 id="ni-j"><a href="#ni-j" class="headerlink" title="ni-j"></a>ni-j</h4><p>   <img src="/images/live2d/ni-j.gif" alt="img"></p><h4 id="nico"><a href="#nico" class="headerlink" title="nico"></a>nico</h4><p>   <img src="/images/live2d/nico.gif" alt="img"></p><h4 id="nietzche"><a href="#nietzche" class="headerlink" title="nietzche"></a>nietzche</h4><p>   <img src="/images/live2d/nietzche.gif" alt="img"></p><h4 id="nipsilon"><a href="#nipsilon" class="headerlink" title="nipsilon"></a>nipsilon</h4><p>   <img src="/images/live2d/nipsilon.gif" alt="img"></p><h4 id="nito"><a href="#nito" class="headerlink" title="nito"></a>nito</h4><p>   <img src="/images/live2d/nito.gif" alt="img"></p><h4 id="shizuku"><a href="#shizuku" class="headerlink" title="shizuku"></a>shizuku</h4><p>   <img src="/images/live2d/shizuku.gif" alt="img"></p><h4 id="tsumiki"><a href="#tsumiki" class="headerlink" title="tsumiki"></a>tsumiki</h4><p>   <img src="/images/live2d/tsumiki.gif" alt="img"></p><h4 id="wanko"><a href="#wanko" class="headerlink" title="wanko"></a>wanko</h4><p>   <img src="/images/live2d/wanko.gif" alt="img"></p><h4 id="z16"><a href="#z16" class="headerlink" title="z16"></a>z16</h4><p>   <img src="/images/live2d/z16.gif" alt="img"></p><h4 id="hibiki"><a href="#hibiki" class="headerlink" title="hibiki"></a>hibiki</h4><p>   <img src="/images/live2d/hibiki.gif" alt="img"></p><h4 id="koharu"><a href="#koharu" class="headerlink" title="koharu"></a>koharu</h4><p>   <img src="/images/live2d/koharu.gif" alt="img"></p><h4 id="haruto"><a href="#haruto" class="headerlink" title="haruto"></a>haruto</h4><p>   <img src="/images/live2d/haruto.gif" alt="img"></p><h4 id="Unitychan"><a href="#Unitychan" class="headerlink" title="Unitychan"></a>Unitychan</h4><p>   <img src="/images/live2d/Unitychan.gif" alt="img"></p><h4 id="tororo"><a href="#tororo" class="headerlink" title="tororo"></a>tororo</h4><p>   <img src="/images/live2d/tororo.gif" alt="img"></p><h4 id="hijiki"><a href="#hijiki" class="headerlink" title="hijiki"></a>hijiki</h4><p>   <img src="/images/live2d/hijiki.gif" alt="img"></p><h2 id="4-安装你自己喜欢的人物对应的模块包"><a href="#4-安装你自己喜欢的人物对应的模块包" class="headerlink" title="4. 安装你自己喜欢的人物对应的模块包"></a>4. 安装你自己喜欢的人物对应的模块包</h2><ol><li><p>模型列表</p><ul><li><code>live2d-widget-model-chitose</code></li><li><code>live2d-widget-model-epsilon2_1</code></li><li><code>live2d-widget-model-gf</code></li><li><code>live2d-widget-model-haru/01</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li><li><code>live2d-widget-model-haru/02</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li><li><code>live2d-widget-model-haruto</code></li><li><code>live2d-widget-model-hibiki</code></li><li><code>live2d-widget-model-hijiki</code></li><li><code>live2d-widget-model-izumi</code></li><li><code>live2d-widget-model-koharu</code></li><li><code>live2d-widget-model-miku</code></li><li><code>live2d-widget-model-ni-j</code></li><li><code>live2d-widget-model-nico</code></li><li><code>live2d-widget-model-nietzsche</code></li><li><code>live2d-widget-model-nipsilon</code></li><li><code>live2d-widget-model-nito</code></li><li><code>live2d-widget-model-shizuku</code></li><li><code>live2d-widget-model-tororo</code></li><li><code>live2d-widget-model-tsumiki</code></li><li><code>live2d-widget-model-unitychan</code></li><li><code>live2d-widget-model-wanko</code></li><li><code>live2d-widget-model-z16</code></li></ul><p>比如我这里选择了<code> hibiki</code>,那么安装命令如下：</p><p>使用使用<code>npm install &#123;packagename&#125;</code>安装模型</p><pre><code class="shell">npm install live2d-widget-model-hibiki</code></pre></li><li><p>这里网上说的是去主题下的<code>_config.yml</code>或者hexo主目录下的<code>_config.yml</code>进行配置，但是我的博客在主题下的<code>_config.yml</code>这样配置后并没有生效，所以我在hexo博客的主目录下的<code>_config.yml</code>文件中进行了如下配置，就可以生效了，将默认的替换成了我自己选择的。</p><pre><code class="typescript"># Live2D## https://github.com/EYHN/hexo-helper-live2d## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-initlive2d:  enable: true  #enable: false  scriptFrom: local # 默认  pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径)  pluginJsPath: lib/ # 脚本文件相对与插件根目录路径  pluginModelPath: assets/ # 模型文件相对与插件根目录路径  # scriptFrom: jsdelivr # jsdelivr CDN  # scriptFrom: unpkg # unpkg CDN  # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中  debug: false # 调试, 是否在控制台输出日志  model:    use: live2d-widget-model-hibiki    # use: live2d-widget-model-wanko # npm-module package name    # use: wanko # 博客根目录/live2d_models/ 下的目录名    # use: ./wives/wanko # 相对于博客根目录的路径    # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url  display:    position: left    width: 145    height: 315  mobile:    show: true # 是否在移动设备上显示    scale: 0.5 # 移动设备上的缩放         react:    opacityDefault: 0.7    opacityOnHover: 0.8</code></pre></li></ol><h2 id="3-参考文章"><a href="#3-参考文章" class="headerlink" title="3.参考文章"></a>3.参考文章</h2><ul><li><a href="https://joeybling.github.io/2019/05/05/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0helper-live2d%E5%8A%A8%E6%80%81%E6%A8%A1%E5%9E%8B%E6%8F%92%E4%BB%B6/">Hexo博客添加helper-live2d动态模型插件</a></li><li><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">live2d的GitHub文档</a></li><li><a href="https://huaji8.top/post/live2d-plugin-2.0/">hexo live2d插件 2.0 !</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo博客配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> live2D </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客优化(转载)</title>
      <link href="/2020/08/13/hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96-%E8%BD%AC%E8%BD%BD/"/>
      <url>/2020/08/13/hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96-%E8%BD%AC%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><pre><code class="bash">$ npm install -g hexo-cli1</code></pre><p>安装以后，可以使用以下两种方式执行 Hexo：</p><ol><li><p><code>npx hexo</code></p></li><li><p>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo</code>：</p><pre><code class="bash">echo &#39;PATH=&quot;$PATH:./node_modules/.bin&quot;&#39; &gt;&gt; ~/.profile1</code></pre></li></ol><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre><code class="bash">$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install123</code></pre><p>新建完成后，指定文件夹的目录如下：</p><pre><code class="bash">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes12345678</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>此时，通过 <code>hexo s</code> 命令即可在本地启动您的博客站点了。</p><pre><code class="bash">~ hexo sINFO  Start processingINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.123</code></pre><p>接下来将安装主题，配置博客托管平台，实现一键发布并刷新CDN缓存。</p><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p><a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a> 是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题，点击 <a href="https://www.lixl.cn/">这里</a> 可以查看示例效果。点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到 Hexo 的 <code>themes</code> 文件夹中即可。</p><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre><code class="bash">hexo new page &quot;categories&quot;1</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre><code class="yaml">---title: categoriesdate: 2018-09-30 17:25:30type: &quot;categories&quot;layout: &quot;categories&quot;---123456</code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre><code class="bash">hexo new page &quot;tags&quot;1</code></pre><p>编辑刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre><code class="yaml">---title: tagsdate: 2018-09-30 18:23:38type: &quot;tags&quot;layout: &quot;tags&quot;---123456</code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre><code class="bash">hexo new page &quot;about&quot;1</code></pre><p>编辑刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre><code class="yaml">---title: aboutdate: 2018-09-30 17:25:30type: &quot;about&quot;layout: &quot;about&quot;---123456</code></pre><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre><code class="bash">hexo new page &quot;friends&quot;1</code></pre><p>编辑刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre><code class="yaml">---title: friendsdate: 2018-12-12 21:25:30type: &quot;friends&quot;layout: &quot;friends&quot;---123456</code></pre><p>同时，在 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre><code class="json">[&amp;#123;    &quot;avatar&quot;: &quot;https://www.lixl.cn/medias/avatar.jpg&quot;,    &quot;name&quot;: &quot;悟尘记&quot;,    &quot;introduction&quot;: &quot;人生就是一场修行，上善若水，厚德载物。&quot;,    &quot;url&quot;: &quot;https://www.lixl.cn/&quot;,    &quot;title&quot;: &quot;前去参观&quot;&amp;#125;, &amp;#123;    &quot;avatar&quot;: &quot;https://wiki.hyperledger.org/download/attachments/2392069/fabric?version=1&amp;modificationDate=1540928132000&amp;api=v2&quot;,    &quot;name&quot;: &quot;Fabric&quot;,    &quot;introduction&quot;: &quot;A Blockchain Platform for the Enterprise&quot;,    &quot;url&quot;: &quot;https://hyperledger-fabric.readthedocs.io/en/master/&quot;,    &quot;title&quot;: &quot;前去学习&quot;&amp;#125;, &amp;#123;    &quot;avatar&quot;: &quot;https://www.bootcdn.cn/assets/img/maoyun.svg&quot;,    &quot;name&quot;: &quot;BootCDN&quot;,    &quot;introduction&quot;: &quot;稳定、快速、免费的前端开源项目 CDN 加速服务。&quot;,    &quot;url&quot;: &quot;https://www.bootcdn.cn/&quot;,    &quot;title&quot;: &quot;前去加速&quot;&amp;#125;]12345678910111213141516171819</code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre><code class="bash">npm i -S hexo-prism-plugin1</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre><code class="yaml">highlight:  enable: falseprism_plugin:  mode: &#39;preprocess&#39;    # realtime/preprocess  theme: &#39;tomorrow&#39;  line_number: false    # default false  custom_css:12345678</code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre><code class="bash">npm install hexo-generator-search --save1</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code class="yaml">search:  path: search.xml  field: post123</code></pre><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱的配置，可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改需要的社交链接地址，增加链接可参考如下代码：</p><pre><code class="html">&lt;a href=&quot;https://github.com/blinkfox&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;访问我的GitHub&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&gt;    &lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;&lt;/a&gt;123</code></pre><p>其中，社交图标（如：<code>fa-github</code>）可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供参考：</p><ul><li>Facebook: <code>fa-facebook</code></li><li>Twitter: <code>fa-twitter</code></li><li>Google-plus: <code>fa-google-plus</code></li><li>Linkedin: <code>fa-linkedin</code></li><li>Tumblr: <code>fa-tumblr</code></li><li>Medium: <code>fa-medium</code></li><li>Slack: <code>fa-slack</code></li><li>新浪微博: <code>fa-weibo</code></li><li>微信: <code>fa-wechat</code></li><li>QQ: <code>fa-qq</code></li></ul><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>通过 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a> 插件可以实现一键将博客同时部署到多个git仓库中。如同时发布到github及gitee提供的pages服务。安装：</p><pre><code class="bash">npm install hexo-deployer-git --save1</code></pre><p>修改 Hexo 根目录下的 <code>_config.yml</code> 文件中的如下内容:</p><pre><code class="yaml">## Docs: https://hexo.io/docs/deployment.htmldeploy:  - type: git    repo: https://github.com/lxl80/blog.git    branch: gh-pages    ignore_hidden: false  - type: git    repo: https://gitee.com/lxl80/lxl80.git    branch: master    ignore_hidden: false12345678910</code></pre><blockquote><p>也可以如本站一样，采用 <a href="https://github.com/75k/hexo-deployer-cos-enhanced">hexo-deployer-cos-enhanced</a> 插件将静态内容部署到腾讯云对象存储服务中，在DNS配置中将境内线路解析到腾讯云CDN地址，实现加速。部署完成后会自动刷新被更新文件的CDN缓存。</p></blockquote><p>安装：</p><pre><code class="bash">npm install hexo-deployer-cos-enhanced --save1</code></pre><p><code>_config.yml</code> 配置如下:</p><pre><code class="yaml">deploy:  - type: git    repo: https://github.com/lxl80/blog.git    branch: gh-pages    ignore_hidden: false  - type: cos    bucket: lxl80-130****    region: ap-beijing    secretId: AKIDh9****F8FvL    secretKey: Z3IGiur****QZR3PgjXmlVg    cdnConfig:      enable: true      cdnUrl: https://static.lixl.cn      bucket: static-130****      region: ap-beijing      folder: static      secretId: AKIDh9****F8FvL      secretKey: Z3IGiur****QZR3PgjXmlVg123456789101112131415161718</code></pre><p>然后通过 <code>hexo g -d</code> 即可实现一键发布，并更新CDN缓存。</p><h3 id="文章链接转静态短地址（建议安装）"><a href="#文章链接转静态短地址（建议安装）" class="headerlink" title="文章链接转静态短地址（建议安装）"></a>文章链接转静态短地址（建议安装）</h3><p>如果文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件生成文章时生成中文拼音的永久链接，或者用<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 生成静态文章链接。以下结合hexo-abbrlink生成类似 <code>/yyyy/mmdd+随机数.html</code> 的文章链接地址。</p><p>安装命令如下：</p><pre><code class="bash">npm install hexo-abbrlink --save1</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，修改 <code>permalink:</code> ，并在文件末尾新增 <code>abbrlink:</code>配置项：</p><pre><code class="yaml">permalink: :year/:month:day:abbrlink.htmlabbrlink:   alg: crc16 #算法选项：crc16丨crc32  rep: dec #输出进制：dec为十进制，hex为十六进制12345</code></pre><h3 id="CND加速（建议启用）"><a href="#CND加速（建议启用）" class="headerlink" title="CND加速（建议启用）"></a>CND加速（建议启用）</h3><p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，<a href="https://www.jsdelivr.com/">jsDelivr</a> + Github便是免费且好用的CDN，非常适合博客网站使用。也可以选择主流云服务商提供的对象存储+CDN来获得更快速及稳定的访问效果，费用低到几乎可忽略。</p><p><strong>用法：</strong></p><pre><code class="http">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径1</code></pre><p><strong>例如：</strong></p><pre><code class="http">https://cdn.jsdelivr.net/gh/lxl80/blog@gh-pages/medias/banner/1.jpg1</code></pre><p>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源。</p><blockquote><p>还可以配合 <a href="https://github.com/Molunerfinn/PicGo">PicGo</a>图床上传工具的<strong>自定义域名前缀</strong>来上传图片，使用极其方便。具体使用方法可参见我的另一篇文章: <a href="https://blog.csdn.net/2019/120114500.html">使用Typora+iPic/PicGo图床+CDN实现高效Markdown创作</a></p></blockquote><h3 id="文章字数统计插件（可选的）"><a href="#文章字数统计插件（可选的）" class="headerlink" title="文章字数统计插件（可选的）"></a>文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre><code class="bash">npm i --save hexo-wordcount1</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre><code class="yaml">wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true12345</code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre><code class="bash">npm install hexo-generator-feed --save1</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code class="yaml">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: &#39; &#39;  order_by: -date123456789</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明已经安装成功了。</p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p>如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre><code class="css">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */.bg-color &amp;#123;    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);&amp;#125;@-webkit-keyframes rainbow &amp;#123;   /* 动态切换背景颜色. */&amp;#125;@keyframes rainbow &amp;#123;    /* 动态切换背景颜色. */&amp;#125;123456789101112</code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>可以直接在 <code>/source/medias/banner</code> 文件夹中更换喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果会 <code>JavaScript</code> 代码，可以修改成自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre><code class="javascript">$(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(/medias/banner/&#39; + new Date().getDay() + &#39;.jpg)&#39;);1</code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图</td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td>表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td>表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre><code class="yaml">---title: 基于Hexo的hexo-theme-matery主题搭建博客并优化date: 2019-10-03 14:25:00---1234</code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre><code class="yaml">---title: 基于Hexo的hexo-theme-matery主题搭建博客并优化date: 2019-10-03 14:25:00author: 悟尘img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: 工具tags:  - blog  - hexo---1234567891011121314151617</code></pre><h2 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h2><p>搜索引擎优化，又称为SEO，即Search Engine Optimization，它是一种通过分析搜索引擎的排名规律，了解各种搜索引擎怎样进行搜索、怎样抓取互联网页面、怎样确定特定关键词的搜索结果排名的技术。Google自动收录效果还不错，百度就差得远了（<code>GitHub</code>不允许百度的<code>Spider</code>爬取<code>GitHub</code>上的内容）。</p><h3 id="百度优化"><a href="#百度优化" class="headerlink" title="百度优化"></a>百度优化</h3><p>登录<a href="https://ziyuan.baidu.com/">百度搜索资源平台</a>， 登录成功之后在 用户中心 –&gt; 站点管理 页面中点击<a href="https://ziyuan.baidu.com/site/siteadd">添加网站</a>，按提示操作。</p><p>![](<a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGl4bC5jbi8yMDIwLzIwMjAwMTI5MjEzMzAyLnBuZy93MTI4MA?x-oss-process=image/format,png">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGl4bC5jbi8yMDIwLzIwMjAwMTI5MjEzMzAyLnBuZy93MTI4MA?x-oss-process=image/format,png</a> =50)</p><blockquote><p>提示：由于百度的spider是爬取不到GitHub的内容的，所以在第三步验证网站的时候，建议选择<code>CNAME验证</code>的方式。</p></blockquote><p>经过以上步骤，百度已经知道有我们网站的存在了，但是百度还不知道我们的网站上有什么内容，所以要向百度推送我们的内容。<code>hexo-theme-matery</code>主题已经内置了 <code>自动推送</code> 的方式， 检查 <code>themes/hexo-theme-matery/_config.yml</code> 文件中如下配置:</p><pre><code class="yaml"># 百度搜索资源平台提交链接baiduPush: true12</code></pre><p>自动推送的JS代码部署在站点的每一个页面源代码中，当页面在每次被浏览时，链接就会被自动推送给百度。</p><h3 id="谷歌优化"><a href="#谷歌优化" class="headerlink" title="谷歌优化"></a>谷歌优化</h3><p>登录 <a href="https://search.google.com/search-console?hl=zh-CN">Google Search Console</a>，点击添加资源，输入自己的域名，按提示操作。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGl4bC5jbi8yMDIwLzIwMjAwMTI5MjE0NzIwLnBuZy93MTI4MA?x-oss-process=image/format,png" alt="img"></p><blockquote><p>提示：需要进行DNS验证，进入DNS域名解析设置页面，按提示增加TXT记录，如下图:<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGl4bC5jbi8yMDIwLzIwMjAwMTI5MjE1MzU4LnBuZy93MTI4MA?x-oss-process=image/format,png" alt="img"></p></blockquote><p>验证成功后，需要提交站点地图。通过安装sitemap插件生成站点地图文件:</p><pre><code class="bash">npm install hexo-generator-sitemap --save npm install hexo-generator-baidu-sitemap --save  #百度专用，可选12</code></pre><p>安装后直接执行 <code>hexo cl&amp;&amp;hexo g -d</code> 命令，就会在网站根目录生成 <code>sitemap.xml</code> 文件。参照下图提交，等待收录。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGl4bC5jbi8yMDIwLzIwMjAwMTI5MjIzMTI0LnBuZy93MTI4MA?x-oss-process=image/format,png" alt="img"></p><blockquote><p>注意：hexo配置文件中的url一定要输入正确的域名，插件是根据url生成站点地图的。</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明"></a>指令说明</h3><p><code>hexo server</code> #启动本地服务器，用于预览主题。Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p><p><code>hexo server -s</code> #以静态模式启动</p><p><code>hexo server -p 5000</code> #更改访问端口 (默认端口为4000，’ctrl + c’关闭server)</p><p><code>hexo server -i IP地址</code> #自定义 IP</p><p><code>hexo clean</code> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹</p><p><code>hexo g</code> #生成静态网页 (执行 $ <code>hexo g</code>后会在站点根目录下生成public文件夹, hexo会将”/blog/source/“ 下面的.md后缀的文件编译为.html后缀的文件,存放在”/blog/public/ “ 路径下)</p><p><code>hexo d</code> #自动生成网站静态文件，并将本地数据部署到设定的仓库(如github)</p><p><code>hexo init</code> 文件夹名称 #初始化XX文件夹名称</p><p><code>npm update hexo -g</code>#升级</p><p><code>npm install hexo -g</code> #安装</p><p><code>node-v</code> #查看node.js版本号</p><p><code>npm -v</code> #查看npm版本号</p><p><code>git --version</code> #查看git版本号</p><p><code>hexo -v</code> #查看hexo版本号</p><h3 id="简写指令"><a href="#简写指令" class="headerlink" title="简写指令"></a>简写指令</h3><pre><code>hexo n &quot;我的第一篇文章&quot;` 等价于 `hexo new &quot;我的第一篇文章&quot;` 还等价于 `hexo new post &quot;我的第一篇文章&quot;hexo p` 等价于 `hexo publishhexo g` 等价于 `hexo generatehexo s`等价于 `hexo serverhexo d` 等价于 `hexo deployhexo g -d`等价于`hexo generate --deploy</code></pre><p>注: <code>hexo clean</code> 没有 简写, <code>git --version</code> 没有简写</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><strong>通过<code>hexo g -d</code>部署时报<code>Error: Spawn failed</code>错误:</strong></li></ol><blockquote><p>这是由于git本地记录的提交版本号与github上不一致导致的，通过<code>git reset --hard commitCode</code>即可解决。</p></blockquote><ul><li><p>检查本地最近提交记录，获取最后一次提交记录的更新时间及标识，如</p><pre><code>280a7fdd46fcfd7d34e652aec15523dcd247fac8</code></pre><pre><code class="bash">cd .deploy_gitcat .git/logs/HEAD    12</code></pre></li><li><p>获取github pages服务所关联分支的最近一次提交记录，获取更新时间及标识。地址一般为：<code>https://github.com/用户名/仓库名/commits/分支名</code>，如<code>https://github.com/lxl80/blog/commits/gh-pages</code></p></li><li><p>如果发现提交最新的提交时间/标识不一致，通过以下命令即可解决:</p><pre><code class="bash">  git reset --hard f085038efdf79546c09641d37b2a2429c1ae8e60 #github上最新的提交标识1</code></pre></li></ul><h2 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h2><ul><li><a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a></li><li><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">闪烁之狐</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery</a></li><li><a href="https://blog.sky03.cn/posts/42790.html#toc-heading-1">Hexo进阶之各种优化</a></li></ul><h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><p><a href="https://www.lixl.cn/2019/092856736.html">基于Hexo的matery主题搭建博客并深度优化</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo博客配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matery主题优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客文章Front-matter</title>
      <link href="/2020/08/12/hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0Front-matter/"/>
      <url>/2020/08/12/hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0Front-matter/</url>
      
        <content type="html"><![CDATA[<h2 id="通用格式"><a href="#通用格式" class="headerlink" title="通用格式"></a>通用格式</h2><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><pre><code>---title: Hello Worlddate: 2013/7/13 20:46:25---</code></pre><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left">文章的文件名</td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能</td><td align="left">true</td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章网址</td><td align="left"></td></tr></tbody></table><h2 id="matery主题的相关详细格式"><a href="#matery主题的相关详细格式" class="headerlink" title="matery主题的相关详细格式"></a>matery主题的相关详细格式</h2><p>针对本站的matery主题的相关选项介绍</p><pre><code class="markdown">---title: 标题date: 2020-02-29 16:00:00summary: # 文章摘要toc: truemathjax: truetop: truecover: trueabbrlink: 213245 # 自己可随意设置img: &#39;https://img-blog.csdnimg.cn/20200309120551356.png&#39; # 设置文章背景图，设置为外链图片，访问快tags:  - 算法  - 计算机知识categories:  - 算法author: # 设置文章作者password: # 设置密码（yml中开启相应功能）coverImg: # 轮播图片---</code></pre><h2 id="修改创建文章时的固定模板"><a href="#修改创建文章时的固定模板" class="headerlink" title="修改创建文章时的固定模板"></a>修改创建文章时的固定模板</h2><p>一般我们在通过以下命令创建文章时，采用的是默认的模板，我们可以对默认的模板进行修改</p><blockquote><p>hexo new “文章的标题”</p></blockquote><p>修改<code>/scaffolds/post.md</code>文件即可,修改如下</p><pre><code class="markdown">---title: &amp;#123;&amp;#123; title &amp;#125;&amp;#125;date: &amp;#123;&amp;#123; date &amp;#125;&amp;#125;tags:summary:cover:top:img:toc: truemathjax: truecategories:    -tags:    ----</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo博客配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目启动时node_sass报错</title>
      <link href="/2020/08/12/vue%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%97%B6%E6%8A%A5%E9%94%99node-sass%E6%8A%A5%E9%94%99/"/>
      <url>/2020/08/12/vue%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%97%B6%E6%8A%A5%E9%94%99node-sass%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h2 id="1、关于vue启动项目时报错"><a href="#1、关于vue启动项目时报错" class="headerlink" title="1、关于vue启动项目时报错"></a>1、关于vue启动项目时报错</h2><p>报错代码如下:</p><pre><code class="shell">npm run dev&gt; hello-vue@1.0.0 dev F:\IDEA\Vue\vue_project\hello-vue&gt; webpack-dev-server --inline --progress --config build/webpack.dev.conf.js 18% building modules 69/75 modules 6 active ...Vue\vue_project\hello-vue\src\App.vue&amp;#123; parser: &quot;babylon&quot; &amp;#125; is deprecated; we now treat it as &amp;#123; parser: &quot;babel&quot; &amp;#125;. 94% asset optimization ERROR  Failed to compile with 1 errors                                                                                                                                                      5:43:54 ├F10: PM┤ error  in ./src/views/Login.vueModule build failed: Error: Missing binding F:\IDEA\Vue\vue_project\hello-vue\node_modules\node-sass\vendor\win32-x64-72\binding.nodeNode Sass could not find a binding for your current environment: Windows 64-bit with Node.js 12.xFound bindings for the following environments:  - Windows 64-bit with Node.js 12.xThis usually happens because your environment has changed since running `npm install`.Run `npm rebuild node-sass` to download the binding for your current environment</code></pre><p>大致的意思是node-sass和node-loader的问题，首先按照提示<code>npm rebuild node-sass</code>进行试着解决问题，但是中途这个node-sass要从GitHub上下载，出现几次网络问题，不能下载。</p><h2 id="2、解决过程"><a href="#2、解决过程" class="headerlink" title="2、解决过程"></a>2、解决过程</h2><h3 id="2-1、看到网上说是node-loader的版本太高的原因"><a href="#2-1、看到网上说是node-loader的版本太高的原因" class="headerlink" title="2.1、看到网上说是node-loader的版本太高的原因"></a>2.1、看到网上说是node-loader的版本太高的原因</h3><ol><li><p>首先去vue项目下的<code>package.json</code>中将node-lodaer的版本修改了下</p><blockquote><p>“sass-loader”: “^7.3.1”,</p></blockquote></li><li><p>然后执行</p><blockquote><p>npm install </p></blockquote><p>然后重新打包项目运行</p><blockquote><p>npm run dev</p></blockquote><p>但是依旧报错</p><pre><code class="shell"> ERROR  Failed to compile with 1 errors                                                                                                                                                      5:43:54 ├F10: PM┤ error  in ./src/views/Login.vueModule build failed: Error: Missing binding F:\IDEA\Vue\vue_project\hello-vue\node_modules\node-sass\vendor\win32-x64-72\binding.nodeNode Sass could not find a binding for your current environment: Windows 64-bit with Node.js 12.x</code></pre><p>说明安装的node-sass并没有安装在当前环境下，但是我去node-modules下的确看到了node-sass模块。令我百思不得其解。</p></li></ol><h3 id="2-2-实际解决方案"><a href="#2-2-实际解决方案" class="headerlink" title="2.2 实际解决方案"></a>2.2 实际解决方案</h3><ol><li><p>首先执行以下安装命令</p><blockquote><p>npm install <a href="mailto:&#115;&#x61;&#x73;&#115;&#45;&#x6c;&#x6f;&#x61;&#x64;&#101;&#x72;&#x40;&#55;&#46;&#51;&#46;&#x31;">&#115;&#x61;&#x73;&#115;&#45;&#x6c;&#x6f;&#x61;&#x64;&#101;&#x72;&#x40;&#55;&#46;&#51;&#46;&#x31;</a> –save-dev</p></blockquote></li><li><p>这样会将会安装<code>sass-loader@7.3.1</code>并且将其添加到dev打包的环境下，这样才不会出现上面的在当前环境下找不到sass-loader（但是其实已经安装了），而且这里的sass-loader版本不能太高。</p></li><li><p>再次执行 </p><blockquote><p>npm run dev </p></blockquote><p>项目完美启动，没有报错。</p><p><img src="/images/4.jpg"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反向代理</title>
      <link href="/2020/08/08/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>/2020/08/08/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>该文章参考了实验室师兄写的教程，并记录了自己在实操过程中的坑。</p><h1 id="1、内网机器配置"><a href="#1、内网机器配置" class="headerlink" title="1、内网机器配置"></a>1、内网机器配置</h1><p>假设现在有一台公用服务器和一台内网服务器，现在想通过反向代理的方式来访问内网服务器。假设公用服务器为A，内网服务器为B。现在将B服务器的22端口绑定到公网服务器A的某一端口P<sub>A</sub>上，那么请求公网的P<sub>A</sub>时，公网服务器就会把请求转发到内网服务器上端口22上。</p><h1 id="2、反向代理"><a href="#2、反向代理" class="headerlink" title="2、反向代理"></a>2、反向代理</h1><p>由于SSH在一段时间没有数据包之后会断开，所以最好直接使用autossh来配置反向代理。<br>（以下操作均在内网进行，而且我采用的是在root账户进行操作）</p><ol><li><p>首先是安装autossh：我在服务器上重装的是Ubuntu18.04，可用以下命令进行安装</p><blockquote><p><strong>apt-get install autossh</strong></p></blockquote></li><li><p>然后添加我们的内网机器的ssh-key到公网以实现自动登陆：**ssh-copy-id &lt;公网机器A的登陆用户名&gt;@&lt;公网机器的ip地址&gt;**。</p><blockquote><p>注意这里的公网机器A的用户名最好不要用root账户来做转发请求，我尝试root账户后发现不能正常反向代理。</p></blockquote></li><li><p>对2的补充，如果本机并没有ssh的key，需要先执行ssh-keygen -t rsa -C “<a href="mailto:&#121;&#x6f;&#117;&#x72;&#95;&#x65;&#109;&#x61;&#x69;&#108;&#64;&#101;&#x78;&#x61;&#109;&#x70;&#x6c;&#x65;&#46;&#99;&#111;&#109;">&#121;&#x6f;&#117;&#x72;&#95;&#x65;&#109;&#x61;&#x69;&#108;&#64;&#101;&#x78;&#x61;&#109;&#x70;&#x6c;&#x65;&#46;&#99;&#111;&#109;</a>“再进行第二步。</p></li><li><p>利用autossh搭建反向隧道：</p><blockquote><p>autossh -M 55555  -fCNR 2061:localhost:22 &lt;公网机器A的ssh登录用户名&gt;@&lt;公网机器A的IP&gt;</p></blockquote></li><li><p>参数介绍：</p><blockquote><p>​     -f 后台执行ssh指令<br> ​    -C 允许压缩数据<br> ​    -N 不执行远程指令<br> ​    -R 将远程主机（服务器）的某个端口转发到本地机器的指定端口<br> ​    -L 将本地机器（客户机）的某个端口转发到远端指定机器的指定端口<br> ​    -p 指定远程主机的端口<br> ​    -M 添加一个端口用于<strong>心跳包</strong>的发送，该端口只要是服务器上一个可用的未被占用的端口就行。/3、</p></blockquote></li></ol><h1 id="3、设置开机自启动"><a href="#3、设置开机自启动" class="headerlink" title="3、设置开机自启动"></a>3、设置开机自启动</h1><h2 id="3-1-对于Ubuntu16系统"><a href="#3-1-对于Ubuntu16系统" class="headerlink" title="3.1 对于Ubuntu16系统"></a>3.1 对于Ubuntu16系统</h2><p>只需要将上述autossh命令加入到 /etc/rc.local就行。</p><blockquote><p>vim /etc/rc.local</p></blockquote><p>将<b>autossh -M 55555  -fCNR 2061:localhost:22 &lt;公网机器A的ssh登录用户名&gt;@&lt;公网机器A的IP&gt;</b>命令加入到exit 0 之前就行。</p><h2 id="3-2-对于我自己重装的Ubuntu18系统来说"><a href="#3-2-对于我自己重装的Ubuntu18系统来说" class="headerlink" title="3.2 对于我自己重装的Ubuntu18系统来说"></a>3.2 对于我自己重装的Ubuntu18系统来说</h2><p>系统并没有这个文件。</p><p>在网上搜索的结果是Ubuntu18之后采用了新的管理开机自启动的方式。具体自行百度。<br>具体可参考这边知乎文章。<br><a href="https://zhuanlan.zhihu.com/p/63507762">Ubuntu18开机启动脚本</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
